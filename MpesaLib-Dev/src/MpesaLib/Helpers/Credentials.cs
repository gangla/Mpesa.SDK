using System;
using System.IO;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;

namespace MpesaLib.Helpers
{
    /// <summary>
    /// Encrypt password helper class for MpesaLib
    /// </summary>
    /// <remarks>
    /// M-Pesa Core authenticates a transaction by decrypting the security credentials. 
    /// Security credentials are generated by encrypting the base64 encoded initiator password with M-Pesa’s public key, 
    /// a X509 certificate.
    /// The algorithm for generating security credentials is as follows:
    /// 1. Write the unencrypted password into a byte array.
    /// 2. Encrypt the array with the M-Pesa public key certificate.Use the RSA algorithm,
    ///    and use PKCS #1.5 padding (not OAEP), and add the result to the encrypted stream.
    /// 3. Convert the resulting encrypted byte array into a string using base64 encoding.
    /// The resulting base64 encoded string is the security credential.
    /// </remarks>
    public static class Credentials
    {
        /// <summary>
        /// Encrypts Mpesa API Security Credential password
        /// </summary>
        /// <param name="certificatePath"></param>
        /// <param name="password"></param>       
        /// <returns>
        /// Encrypted password
        /// </returns>
        public static string EncryptPassword(string certificatePath, string password)
        {                  
            var certificatedata = ReadCertificateFile(certificatePath);           

            X509Certificate2 x509 = new X509Certificate2(certificatedata);

            RSA publicprovider = (RSA)x509.PublicKey.Key;

#if !NETSTANDARD2_0
            var key = publicprovider.ToXmlString(false);              
#else
            var key = publicprovider.ToXmlString2(false);          
#endif          
            var encodedPassword = Encoding.UTF8.GetBytes(password);         

            using (var rsa2 = new RSACryptoServiceProvider())
            {
                try
                {
                    rsa2.FromXmlString2(key);
                    var encryptedData = rsa2.Encrypt(encodedPassword, false);
                    var base64Encrypted = Convert.ToBase64String(encryptedData);                                   
                    return base64Encrypted;
                }
                finally
                {
                    rsa2.PersistKeyInCsp = false;
                }
            }
        }

       
        /// <summary>
        /// Reads and returns certificate data in bytes
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns>
        /// Certificate data in bytes
        /// </returns>
        private static byte[] ReadCertificateFile(string fileName)
        {
            FileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            int size = (int)f.Length;
            byte[] data = new byte[size];
            size = f.Read(data, 0, size);
            f.Close();
            return data;
        }



    }
}
